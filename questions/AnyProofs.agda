{-# OPTIONS -v Generics:100 #-}
module AnyProofs where

open import Prelude.Init
open import Prelude.DecEq
open import Prelude.Decidable
open import Prelude.Nary
open import Prelude.Ord
-- open import Prelude.Membership
open L.Mem
open import Prelude.Functor
open import Prelude.Bifunctor
open import Prelude.Applicative
open import Prelude.Monad
open import Prelude.Show

open import Prelude.Generics hiding (viewTy)
open Meta
open Debug ("Generics" , 100)

private variable A B : Set ‚Ñì

TTerm = Term √ó Type
THole = Hole √ó Type

record Solver (A : Set ‚Ñì) : Set‚ÇÅ where
  field
    View : Set
    view : Term ‚Üí Maybe View
    solve : THole ‚Üí View ‚Üí TC ‚ä§

  syntax view {A = A} = view‚ü® A ‚ü©
-- syntax solve {A = A} = solve‚ü® A ‚ü©

  macro
    solveM : Hole ‚Üí TC ‚ä§
    solveM hole = do
      ty ‚Üê inferType hole
      case view ty of Œª where
        (just v) ‚Üí solve (hole , ty) v
        nothing  ‚Üí error $ "Can only solve holes of type: " ‚óá show (quoteTerm A)
open Solver ‚¶É...‚¶Ñ public

mkSolveTerm : Type ‚Üí Term
mkSolveTerm ty = def (quote solveM) ‚ü¶ hArg? , hArg ty ‚üß

solveAs : THole ‚Üí TC ‚ä§
solveAs (hole , ty) = do
  print ("Solving " ‚óá show hole ‚óá " as " ‚óá show ty)
  noConstraints $ unify hole (mkSolveTerm ty)

pattern _`,_ x y = quote _,_ ‚óÜ‚ü¶ x ‚à£ y ‚üß

-- data ùïå : Set where

macro
  solveAll : Hole ‚Üí TC ‚ä§
  solveAll hole = do
    print $ "***************\nHole: " ‚óá show hole ‚óá "\n***************\n"
    ty ‚Üê inferType hole
    printS ty
    ty ‚Üê normalise ty
    print " ‚Üù " >> printS ty
    unify hole $ case view ty of Œª where
      (ANY v) ‚Üí solveM {A =


    -- A ‚Üê unquoteTC {A = Set} ty
    -- unify hole $ quoteTerm (solveM {A = A})
    -- A ‚Üê unquoteTC ty
    -- case view {A = A} ty of Œª where
    --   (just v) ‚Üí solve (hole , ty) v
    --   nothing  ‚Üí error $ "Can only solve holes of type: " ‚óá show (quoteTerm A)
    -- unify hole $ quote solve ‚àô‚ü¶ hole `, ty ‚üß
    -- unify hole $ def (quote solveM) ‚ü¶ hArg? , hArg ty ‚üß
      -- unifyStrict (hole , ty) $ def (quote solveM) ‚ü¶ hArg? , hArg ty ‚üß
      -- solveAs =<< (hole ,_) <$> inferType hole

-- ** EQ solver

data ViewEq : Set where
  _`‚â°_ : Term ‚Üí Term ‚Üí ViewEq

viewEq : Term ‚Üí Maybe ViewEq
viewEq = Œª where
  (def (quote _‚â°_) (hArg _ ‚à∑ hArg _ ‚à∑ vArg x ‚à∑ vArg y ‚à∑ [])) ‚Üí just (x `‚â° y)
  _ ‚Üí nothing

solveEq : THole ‚Üí ViewEq ‚Üí TC ‚ä§
solveEq (hole , _) (x `‚â° y) = do
  print $ show x ‚óá " =? " ‚óá show y
  x ‚Üê normalise x
  y ‚Üê normalise y
  print $ show x ‚óá " =? " ‚óá show y
  decideEq hole (x , y) <|> tryEq hole (x , y)
  where
    decideEq : Hole ‚Üí Term √ó Term ‚Üí TC ‚ä§
    decideEq hole (x , y) = do
      let x‚â°y = quote _‚â°_ ‚àô‚ü¶ x ‚à£ y ‚üß
      let x‚âüy = quote _‚âü_ ‚àô‚ü¶ x ‚à£ y ‚üß
      unifyStrict (hole , x‚â°y) $ def (quote toWitness) (hArg? ‚à∑ hArg x‚â°y ‚à∑ hArg x‚âüy ‚à∑ vArg (quote tt ‚óÜ) ‚à∑ [])
      print $ "Decided: " ‚óá show x ‚óá " ‚â° " ‚óá show y

    tryEq : Hole ‚Üí Term √ó Term ‚Üí TC ‚ä§
    tryEq hole (x , y) =
      if x == y then (do
        print "tryEq: terms are exactly equal, applying reflexivity..."
        unifyStrict (hole , quote _‚â°_ ‚àô‚ü¶ x ‚à£ y ‚üß) (quote refl ‚óÜ)
        )
      -- else if == swap
      --   print "tryEq: terms are swapped, applying commutativity..."
      --   ...
      else error "tryEq: terms are not exactly equal, cannot apply reflexivity"

instance
  Solver-Eq : ‚àÄ {x y : A} ‚Üí Solver (x ‚â° y)
  Solver-Eq = Œª where
    .View ‚Üí ViewEq
    .view ‚Üí viewEq
    .solve ‚Üí solveEq

private
  -- _ : 5 ‚â° 5
  -- _ = solveM {A = 5 ‚â° 5}

  _ : 5 ‚â° 5
  _ = solveAll

  _ : 5 ‚â° 1 + 1 + 0 + 2 + 0 + 1
  _ = solveAll

  _ : ‚àÄ {x : ‚Ñï} ‚Üí x ‚â° x
  _ = solveAll

  _ : ‚àÄ {x} ‚Üí suc x ‚â° suc x
  _ = solveAll

-- ** Any solver
data ViewAny : Set where
  Any‚¶Ö_‚¶Ü : Term √ó Term ‚Üí ViewAny

viewAny : Term ‚Üí Maybe ViewAny
viewAny = Œª where
  (def (quote Any) as) ‚Üí case vArgs as of Œª where
    (P ‚à∑ xs ‚à∑ []) ‚Üí just Any‚¶Ö P , xs ‚¶Ü
    _ ‚Üí nothing
  _ ‚Üí nothing

data ViewList : Set where
  ‚à∑‚¶Ö_,_‚¶Ü : Term ‚Üí Term ‚Üí ViewList
  ++‚¶Ö_,_‚¶Ü : Term ‚Üí Term ‚Üí ViewList

viewList : Term ‚Üí Maybe ViewList
viewList = Œª where
  (con (quote L._‚à∑_) args) ‚Üí
    case vArgs args of Œª where
      (x ‚à∑ xs ‚à∑ []) ‚Üí just ‚à∑‚¶Ö x , xs ‚¶Ü
      _ ‚Üí nothing
  (def (quote _++_) args) ‚Üí
    case vArgs args of Œª where
      (xs ‚à∑ ys ‚à∑ []) ‚Üí just ++‚¶Ö xs , ys ‚¶Ü
      _ ‚Üí nothing
  _ ‚Üí nothing

{-# TERMINATING #-}
solveAny : THole ‚Üí ViewAny ‚Üí TC ‚ä§
solveAny thole@(hole , ty) Any‚¶Ö P , xs ‚¶Ü = do
  printLn ">ANY"
  xs ‚Üê normalise xs
  case viewList xs of Œª where
    nothing ‚Üí error $ "Not recognized: " ‚óá show xs
    (just c) ‚Üí case c of Œª where
      ‚à∑‚¶Ö y , ys ‚¶Ü ‚Üí do
        printLn $ "Recognized: Any " ‚óá show P ‚óá " " ‚óá show y ‚óá " ‚à∑ " ‚óá show ys
        (do
          printS P
          printS y
          ty‚Ä≤ ‚Üê P -‚àô- y
          printS ty‚Ä≤
          -- unifyStrict thole $ quote Any.here ‚óÜ‚ü¶ mkSolveTerm ty‚Ä≤ ‚üß
          hole‚Ä≤ ‚Üê newMeta ty‚Ä≤
          solveAs (hole‚Ä≤ , ty‚Ä≤)
          unifyStrict thole $ quote Any.here ‚óÜ‚ü¶ hole‚Ä≤ ‚üß
          ) <|> (do
          let ty‚Ä≤ = quote Any ‚àô‚ü¶ P ‚à£ ys ‚üß
          -- unifyStrict thole $ quote Any.there ‚óÜ‚ü¶ mkSolveTerm ty‚Ä≤ ‚üß
          hole‚Ä≤ ‚Üê newMeta ty‚Ä≤
          solveAny (hole‚Ä≤ , ty‚Ä≤) Any‚¶Ö P , ys ‚¶Ü
          unifyStrict thole $ quote Any.there ‚óÜ‚ü¶ hole‚Ä≤ ‚üß
          )
      ++‚¶Ö ys , zs ‚¶Ü ‚Üí do
        printLn $ "Recognized: Any " ‚óá show P ‚óá " " ‚óá show ys ‚óá " ++ " ‚óá show zs
        (do
          let ty‚Ä≤ = quote Any ‚àô‚ü¶ P ‚à£ ys ‚üß
          unifyStrict thole $ quote L.Any.++‚Å∫À° ‚àô‚ü¶ mkSolveTerm ty‚Ä≤ ‚üß
          ) <|> (do
          let ty‚Ä≤ = quote Any ‚àô‚ü¶ P ‚à£ zs ‚üß
          -- hole‚Ä≤ ‚Üê newMeta ty‚Ä≤
          -- solveAny hole‚Ä≤ Any‚¶Ö P , zs ‚¶Ü
          unifyStrict thole $ quote L.Any.++‚Å∫ ≥ ‚àô‚ü¶ ys ‚à£ mkSolveTerm ty‚Ä≤ ‚üß
          )

instance
  Solver-Any : ‚àÄ {A : Set ‚Ñì} {xs : List A} {P : Pred A ‚Ñì‚Ä≤} ‚Üí Solver (Any P xs)
  Solver-Any = Œª where
    .View ‚Üí ViewAny
    .view ‚Üí viewAny
    .solve ‚Üí solveAny

private
  variable xs ys : List ‚Ñï

  _ : Any (_‚â° 0) (0 ‚à∑ [])
  _ = solveAll

  _ : Any (_‚â° 0) [ 0 ]
  _ = solveAll

  _ : Any (_‚â° 0) ‚ü¶ 0 ‚üß
  _ = solveAll

  _ : Any (_‚â° 0) (1 ‚à∑ 0 ‚à∑ [])
  _ = solveAll

  _ : Any (_‚â° 0) (2 ‚à∑ 1 ‚à∑ 0 ‚à∑ [])
  _ = solveAll

  _ : Any (_‚â° 0) (0 ‚à∑ xs)
  _ = solveAll

  _ : Any (_‚â° 0) ((0 ‚à∑ []) ++ xs)
  _ = solveAll

  _ : Any (_‚â° 0) (xs ++ (0 ‚à∑ []))
  _ = solveAll

  _ : Any (_‚â° 0) (xs ++ ys ++ (0 ‚à∑ []))
  _ = solveAll

  _ : Any (_‚â° 0) (xs ++ ys ++ (1 ‚à∑ 125 ‚à∑ 0 ‚à∑ []))
  _ = solveAll

  _ : 0 ‚àà (0 ‚à∑ 1 ‚à∑ xs)
  _ = solveAll

  _ : 0 ‚àà xs ++ (0 ‚à∑ 1 ‚à∑ xs)
  _ = solveAll


{-
-- ** General solver (dispatches to sub-solvers)

data ViewTy : Set where
  ANY EQ LIST ‚àÖ : ViewTy

viewTy : Type ‚Üí ViewTy
viewTy ty =
  case viewAny ty of Œª where
    ‚àÖ ‚Üí case viewEq ty of Œª where
          ‚àÖ ‚Üí case viewList ty of Œª where
                ‚àÖ ‚Üí ‚àÖ
                _ ‚Üí LIST
          _ ‚Üí EQ
    _ ‚Üí ANY

macro
  solve : Hole ‚Üí TC ‚ä§
  solve hole@(meta holeM _) = do
    print $ "***************\nHole: " ‚óá show hole ‚óá "\n***************\n"
    ty ‚Üê normalise hole >>= (inferType >=> normalise)
    solve‚Ä≤ (hole , ty)
    {-
    printTerm "hole" hole
    hole‚Ä≤ ‚Üê instantiate hole
    printTerm "hole‚Ä≤" hole‚Ä≤
    solve‚Ä≤ (hole , ty) <|> solve‚Ä≤ (hole‚Ä≤ , ty)
    -}
  solve _ = error "hole is not a meta"

solve‚Ä≤ : Hole √ó Type ‚Üí TC ‚ä§
solve‚Ä≤ ht@(hole , ty) = case viewTy ty of Œª where
  ANY ‚Üí solveAny‚Ä≤ ht
  EQ  ‚Üí solveEq‚Ä≤ hole
  _   ‚Üí error "can only solve ANY or EQ propositions"

-}
