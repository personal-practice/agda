open import Prelude.Init; open SetAsType

-- ** 1a. single level: no lawful wrappers
record Interface (A : Type) : Type where
  field method1 : A ‚Üí ‚Ñï; method2 : A ‚Üí A ‚Üí ‚Ñï
open Interface ‚¶É...‚¶Ñ public

record Laws (A : Type) ‚¶É _ : Interface A ‚¶Ñ : Type where
  field method-correct : ‚àÄ (x y : A) ‚Üí method2 x y ‚â° method1 x + method1 y
open Laws ‚¶É...‚¶Ñ public

module ùüôa {A : Type} ‚¶É _ : Interface A ‚¶Ñ ‚¶É _ : Laws A ‚¶Ñ where
  method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
  method3 x y z = method2 x y + method1 z

  method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 z
  method3-correct x y z rewrite method-correct x y = refl

-- ** 1b. single level: using lawful interface
record Lawful-Interface (A : Type) : Type where
  field ‚¶É hasInterface ‚¶Ñ : Interface A
        ‚¶É respectsLaws ‚¶Ñ : Laws A
open Lawful-Interface ‚¶É...‚¶Ñ using () public

module ùüôb {A : Type} ‚¶É _ : Lawful-Interface A ‚¶Ñ where
  method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
  method3 x y z = method2 x y + method1 z

  method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 z
  method3-correct x y z rewrite method-correct x y = refl

record Interface‚Ä≤ (A : Type) ‚¶É _ : Interface A ‚¶Ñ : Type where
  field op : A ‚Üí A
open Interface‚Ä≤ ‚¶É...‚¶Ñ public

record Laws‚Ä≤ (A : Type) ‚¶É _ : Interface A ‚¶Ñ ‚¶É _ : Laws A ‚¶Ñ ‚¶É _ : Interface‚Ä≤ A ‚¶Ñ : Type where
-- record Laws‚Ä≤ (A : Type) ‚¶É _ : Lawful-Interface A ‚¶Ñ ‚¶É _ : Interface‚Ä≤ A ‚¶Ñ : Type where
  field op-correct : ‚àÄ (x : A) ‚Üí op (op x) ‚â° op x
open Laws ‚¶É...‚¶Ñ public

-- ** 2a. two levels: no lawful wrapper
module ùüöa {A : Type} ‚¶É _ : Interface A ‚¶Ñ ‚¶É _ : Laws A ‚¶Ñ ‚¶É _ : Interface‚Ä≤ A ‚¶Ñ ‚¶É _ : Laws‚Ä≤ A ‚¶Ñ where
    method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
    method3 x y z = method2 x y + method1 (op z)

    method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 (op z)
    method3-correct x y z rewrite method-correct x y = refl

-- record Lawful-Interface‚Ä≤ (A : Type) ‚¶É _ : Lawful-Interface A ‚¶Ñ : Type where
-- -- record Lawful-Interface‚Ä≤ (A : Type) ‚¶É _ : Interface A ‚¶Ñ ‚¶É _ : Laws A ‚¶Ñ : Type where
--   field ‚¶É hasInterface ‚¶Ñ : Interface‚Ä≤ A
--         ‚¶É respectsLaws ‚¶Ñ : Laws‚Ä≤ A
-- open Lawful-Interface‚Ä≤ ‚¶É...‚¶Ñ using () public

-- -- ** 2b. two levels: only outer lawful wrapper
-- module ùüöb {A : Type} ‚¶É _ : Interface A ‚¶Ñ ‚¶É _ : Laws A ‚¶Ñ ‚¶É _ : Lawful-Interface‚Ä≤ A ‚¶Ñ where
--   method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
--   method3 x y z = method2 x y + method1 (op z)

-- --   method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 z
-- --   method3-correct x y z rewrite method-correct x y = refl

-- -- ** 2c. two levels: only inner lawful wrapper
-- module ùüöc {A : Type} ‚¶É _ : Lawful-Interface A ‚¶Ñ ‚¶É _ : Interface‚Ä≤ A ‚¶Ñ ‚¶É _ : Laws‚Ä≤ A ‚¶Ñ where
--   method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
--   method3 x y z = method2 x y + method1 (op z)

--   -- method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 z
--   -- method3-correct x y z rewrite method-correct x y = refl

-- -- ** 2d. two levels: both outer and inner lawful wrapper
-- module ùüöd {A : Type} ‚¶É _ : Lawful-Interface A ‚¶Ñ where
--   _ : Interface A
--   _ = it

--   _ : Laws A
--   _ = it

--   _ : Lawful-Interface A
--   _ = it

-- -- module ùüöd {A : Type} ‚¶É i : Lawful-Interface A ‚¶Ñ ‚¶É _ : Lawful-Interface‚Ä≤ A ‚¶É i ‚¶Ñ ‚¶Ñ where
-- --   method3 : A ‚Üí A ‚Üí A ‚Üí ‚Ñï
-- --   method3 x y z = method2 x y + method1 (op z)

--   -- method3-correct : ‚àÄ x y z ‚Üí method3 x y z ‚â° method1 x + method1 y + method1 z
--   -- method3-correct x y z rewrite method-correct x y = refl
